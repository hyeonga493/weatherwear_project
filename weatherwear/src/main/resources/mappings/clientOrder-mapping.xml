<?xml version="1.0" encoding="UTF-8"?>

<!-- MyBatis 다운 파일 PDF 에서 붙여넣은 내용입니다. -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
				"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
				
<!-- MySQL 에 테스트용 테이블 order 테이블 CRUD SQL문 작성-->

<!-- mapper를 루트 엘리먼트로 사용합니다. -->
<mapper namespace="OrderDAO">
	
	<resultMap type="orderVO" id="orderVO">
		<id property="odid" column="odid"/><!-- pk에 사용 --> 
		<result property="clientId" column="cId"/><!-- orders에는 소문자인 cid로 생성되어있음 -->
		<result property="clientNum" column="cNum"/>
		<result property="clientEmail" column="cEmail"/>
		<result property="clientName" column="cName"/>
		<result property="clientPoint" column="cPoint"/>
		<result property="cpList" column="cpList"/>
		<result property="pmId" column="pmId"/> 
		<result property="proId" column="proId"/> 
		<result property="proName" column="proName"/> 
		<result property="proPrice" column="proPrice"/> 
		<result property="opIdList" column="opIdList"/> 
		<result property="opId" column="opId"/> 
		<result property="opSize" column="opSize"/> 
		<result property="opColor" column="opColor"/> 
		<result property="odProCnt" column="odProCnt"/> 
		<result property="odStatus" column="odStatus"/>
		<result property="odPrice" column="odPrice"/> 
		<result property="odDate" column="odDate"/> 
		<result property="odTotal" column="odTotal"/> 
		<result property="cpId" column="cpId"/> 
		<result property="deliId" column="deliId"/> 
		<result property="deliNum" column="deliNum"/> 
		<result property="deliPrice" column="deliPrice"/> 
		<result property="addId" column="addId"/> 
		<result property="addName" column="addName"/> 
		<result property="addNum" column="addNum"/> 
		<result property="addPostNum" column="addPostNum"/> 
		<result property="address1" column="address1"/> 
		<result property="address2" column="address2"/> 
		<result property="addMemo" column="addMemo"/> 
		<result property="addBase" column="addBase"/> 
		<result property="grId" column="grId"/>
		<result property="grPoint" column="grPoint"/>
		<result property="cpName" column="cpName"/>
		<result property="cpPrice" column="cpPrice"/>
		<result property="cpStDate" column="cpStDate"/>
		<result property="cpEndDate" column="cpEndDate"/>
		<result property="cpStatus" column="cpStatus"/>
		<result property="minPrice" column="minPrice"/>
		<result property="payId" column="payId"/>
		<result property="payMtd" column="payMtd"/>
		<result property="payDate" column="payDate"/>
		<result property="payStatus" column="payStatus"/>
		<result property="addColumn" column="addColumn"/><!-- 리스트 select구문에서 추가한 별칭컬럼 -->
		<result property="plusPoint" column="plusPoint"/><!-- 상세 select구문에서 추가한 별칭컬럼 -->
		<result property="usedPoint" column="usedPoint"/><!-- 상세 select구문에서 추가한 별칭컬럼 -->
		<!-- cart 테이블로부터 가져오기 위해 -->
		<result property="caId" column="caId"/>
		<result property="caCnt" column="caCnt"/>
		<result property="imageName" column="imageName"/>
		<result property="imageDir" column="imageDir"/>
		<result property="reStar" column="reStar"/>
		<result property="reId" column="reId"/>
		<result property="reContent" column="reContent"/>
		<result property="reContent" column="reContent"/>
		<result property="reImageName" column="reImageName"/>
		<result property="reImageDir" column="reImageDir"/>
		<result property="reDate" column="reDate"/>
	</resultMap>

	<resultMap type="orderVO" id="addressVO">
		<result property="addId" column="addId"/> 
		<result property="addName" column="addName"/> 
		<result property="addNum" column="addNum"/> 
		<result property="addPostNum" column="addPostNum"/> 
		<result property="address1" column="address1"/> 
		<result property="address2" column="address2"/> 
		<result property="addMemo" column="addMemo"/> 
		<result property="addBase" column="addBase"/>
	</resultMap>

<!-- 사용자 주문 내역 조회 --> <!-- 상품이 여러 종류일 때, __ 외 _ 의 형식으로 / 1종류일 때, (상품명)으로 출력  -->
 	<select id="getOrderList" resultMap="orderVO" parameterType="orderVO">
		SELECT od.odid, od.cId, od.odStatus, od.odPrice,pay.payDate,pay.payStatus,pay.payMtd,pro.proId, pro.proName, im.imageName, im.imageDir,count(*),
		CASE
			WHEN count(*) = 1 THEN pro.proName
			ELSE concat(pro.proName,' 외 ',count(*)-1,'개')
			END AS 'addColumn'
		FROM orders od
		JOIN product pro ON od.opIdList LIKE CONCAT('%', pro.proId, '%')
        JOIN payment_info pay ON pay.odid = od.odid
		JOIN product_image im ON (pro.proId = im.imageBy AND im.imageStatus='대표')
		WHERE od.cId=#{clientId}
		GROUP BY od.odid;
	</select>
	
	<!-- 조회 - 주문 상태 -->
	<select id="getOdStatus" resultMap="orderVO" parameterType="orderVO">
		SELECT od.odStatus,od.usedPoint,od.odid,pay.payMtd,pay.payStatus,pay.payDate
		FROM orders od
		LEFT JOIN payment_info pay ON pay.odid = od.odid
		WHERE od.odid =#{odid};
	</select>
	
	<!-- 조회 - 상품정보 -->
	<select id="getOdInfo" resultMap="orderVO" parameterType="orderVO">
		SELECT DISTINCT cl.cId, pro.proName, pro.proId, op.opId, op.opColor, op.opSize,od_i.odProCnt, im.imageName, im.imageDir, re.reId
		FROM option_info op
		LEFT JOIN product pro ON op.proId = pro.proId
		LEFT JOIN orders_info od_i ON od_i.opid=op.opId
		LEFT JOIN orders od ON od.odid = od_i.odid
		LEFT JOIN product_image im ON (op.proId = im.imageBy AND im.imageStatus='대표')
		LEFT JOIN client cl ON cl.cId  = od.cId 
		LEFT JOIN review re ON (re.opId = op.opId AND od.odId=re.odId)
		WHERE op.opId IN (
			SELECT od_i.opId
			FROM orders od
			JOIN orders_info od_i ON od.opIdList LIKE CONCAT('%', od_i.opId, '%')  
			WHERE od.odid =#{odid});
	</select>
	
	<!-- 조회 - 배송지정보 -->
	<select id="getAdress" resultMap="orderVO" parameterType="orderVO">
		SELECT  od.odid, od.addId,cl_a.addName, cl_a.addNum, cl_a.addPostNum, 
			cl_a.address1, cl_a.address2, cl_a.addMemo, cl_a.addBase
		FROM client_address cl_a
		LEFT JOIN orders od ON od.addId = cl_a.addId
		WHERE od.odid = #{odid}
		GROUP BY odid;
	</select>
	
	<!-- 조회 - 금액정보 -->
	<select id="getPrice" resultMap="orderVO" parameterType="orderVO">
		SELECT DISTINCT od.odid, od.odPrice,od_i.odTotal, deli_i.deliPrice, od.cpId, cp_i.cpName, cp_i.cpPrice
		FROM orders od
		LEFT JOIN deliver_info deli_i ON deli_i.odid = od.odid
		LEFT JOIN orders_info od_i ON od_i.odid = od.odid
		LEFT JOIN coupon_info cp_i ON cp_i.cpId = od.cpId
		WHERE od.odid = #{odid}
		GROUP BY odid;
	</select>
	<!-- 조회 - 포인트정보 -->

	<!-- 		주문하기 페이지		 -->
	<!-- 배송지 - 목록 조회 -->
	<select id="toOrder_get_AddList" resultMap="orderVO" parameterType="orderVO">
		SELECT c.cName, c.cNum,c_a.* 
		FROM client c JOIN client_address c_a 
		ON c.cId = c_a.cId 
		WHERE c.cId = #{clientId};
	</select>
	
	<!-- 기본 배송지 조회 -->
	<select id="toOrder_get_AddBase" resultMap="orderVO" parameterType="orderVO">
		SELECT c.cName, c.cNum,c_a.* 
		FROM client c JOIN client_address c_a 
		ON c.cId = c_a.cId 
		WHERE c_a.addBase = 'Y' 
		AND c.cId = #{clientId};
	</select>

	<!--  배송지 추가 (기본배송지로 선택할지 결정 포함)   if 태그로 Y 일 경우에는 추가시키고 N일 경우에는 삽입문만 입력 -->
	<update id="toOrder_add_address_update" parameterType="orderVO">
		UPDATE client_address
		SET addBase = CASE WHEN cId = #{clientId} AND #{addBase}='Y' THEN 'N' END 
		WHERE cId = #{clientId} AND #{addBase}='Y' ;
	</update>
	
	<!--  배송지 추가 (기본배송지로 선택할지 결정 포함)  -->
	<insert id="toOrder_add_address_insert" parameterType="orderVO">
		INSERT INTO client_address
		VALUES(#{addId},#{clientId},#{addName},#{addNum},#{addPostNum},#{address1},#{address2},#{addMemo},#{addBase});
	</insert>
		
	<!-- 주문자 정보 - 변경버튼 클릭하면 회원 정보 수정 팝업 -->
	<select id="toOrder_get_client" resultMap="orderVO" parameterType="orderVO">
		SELECT cId, cName, cNum, cEmail,cPoint FROM client WHERE cId=#{clientId}; 
	</select>

	<!-- 처음에 상품목록불러오기 --><!-- java에서 for문으로 반복 --><!-- 장바구니로부터 -->
	<select id="toOrder_get_cart" resultMap="orderVO" parameterType="orderVO">
		SELECT p.proName,op.opColor,op.opSize,op.opId,ca.caCnt,ca.caId
		FROM cart ca
		LEFT JOIN product p ON ca.opId LIKE CONCAT('%', p.proId, '%')
		LEFT JOIN option_info op ON ca.opId= op.opId
		WHERE ca.caId = #{caId};
	</select>
	
	<!-- 처음에 상품목록불러오기 --><!-- java에서 for문으로 반복 --><!-- 상품상세로부터 -->
	<select id="toOrder_get_product" resultMap="orderVO" parameterType="orderVO">
		SELECT p.proId,p.proName,op.opColor,op.opSize,op.opId
		FROM option_info op
		LEFT JOIN  product p ON op.opId LIKE CONCAT('%', p.proId, '%')
		WHERE op.opId = #{opId};    <!-- 수량은 자바에서 받아서 바로 화면으로 처리 -->
	</select>


	<!-- 처음에 나올 총 금액(실결제 아님) --><!-- java에서 for문으로 반복 --><!-- 장바구니로부터 -->
	<select id="toOrder_get_Price" resultMap="orderVO" parameterType="orderVO">
		SELECT c.caCnt*p_p.proPrice AS odTotal FROM cart c 
		LEFT JOIN product_price p_p ON p_p.proId = c.proId 
		WHERE c.caId = #{caId}; 	
	</select> 

	<!-- 처음에 나올 총 금액 계산을 위한 상품 금액 --><!-- java에서 for문으로 반복 --><!-- 상품상세로부터 -->
	<select id="toOrder_get_Price_product" resultMap="orderVO" parameterType="orderVO">
		SELECT p.proId,p_p.proPrice
		FROM product_price p_p
		LEFT JOIN  product p ON p.proId = p_p.proId
		WHERE p.proId = #{proId}; <!-- proPrice * 자바의 cnt -->  
	</select>

	<!-- 회원의 등급에 해당하는 포인트% -->
	<select id="toOrder_get_Point" resultMap="orderVO" parameterType="orderVO">
		SELECT cl.cId, gr.grPoint 
		FROM client cl
		LEFT JOIN grade gr ON gr.grId = cl.grId
		WHERE cl.cId = #{clientId};
	</select> 

	<!-- 처음에 나올 해당 회원의 쿠폰 목록 -->
	<select id="toOrder_get_couponList" resultMap="orderVO" parameterType="orderVO">
		SELECT cp_i.cpName,cp_l.cpStatus,cp_i.cpPrice,cp_i.minPrice, cp_i.cpId FROM coupon_list cp_l 
		LEFT JOIN coupon_info cp_i ON cp_l.cpId = cp_i.cpId 
		WHERE cp_l.cId=#{clientId}  AND cp_l.cpStatus='사용가능';				
	</select> 

	<!-- 선택된 쿠폰 -->
	<select id="toOrder_get_coupon_choose" resultMap="orderVO" parameterType="orderVO">
		SELECT cp_i.cpName,cp_l.cpStatus,cp_i.cpPrice,cp_i.minPrice, cp_i.cpId FROM coupon_list cp_l 
		LEFT JOIN coupon_info cp_i ON cp_l.cpId = cp_i.cpId 
		WHERE cId=#{clientId} AND cp_i.cpId=#{cpId_choose};				
	</select> 

	<!-- 주문 상품 정보(장바구니로부터)  자바에서 처리 -->
	<insert id="toOrder_insert_into_orders" parameterType="orderVO">
		INSERT IGNORE INTO orders (odid,cid, addId, opIdList,deliId,odDate,odPrice,usedPoint,odStatus,cpId)
		VALUES (#{odid}, #{clientId}, #{addId}, #{opIdList}, (SELECT substring(#{odid},2) FROM DUAL), (SELECT current_timestamp() FROM DUAL),
		        #{odPrice}, #{usedPoint}, #{odStatus}, #{cpId});
	</insert>
	
	<!-- 주문 상품 정보(장바구니로부터)  -->
	<insert id="toOrder_insert_into_orders_info" parameterType="orderVO">
		INSERT IGNORE INTO orders_info (odid,opId,odProCnt,odTotal)
		VALUES (#{odid}, (SELECT opId FROM cart WHERE cId=#{clientId} AND caId=#{caId}),
		        (SELECT caCnt FROM cart WHERE cId=#{clientId} AND caId=#{caId}),
		        (SELECT c.caCnt*p_p.proPrice FROM cart c LEFT JOIN product_price p_p ON p_p.proId = c.proId  WHERE caId=#{caId}));
	</insert>	

	<!-- 주문 상품 정보  --><!-- 상품상세로부터!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
	<insert id="toOrder_insert_into_orders_info_product" parameterType="orderVO">
		INSERT IGNORE iNTO orders_info  (odid,opId,odProCnt,odTotal)
		VALUES (#{odid}, #{opid}, #{odProCnt}, #{odTotal} );
	</insert>

	
	<!-- 주문한 cart 삭제 --><!-- 장바구니로부터만 사용 -->
	<delete id="toOrder_delete_usedcaId"><!-- java에서 for문으로 반복 -->
		DELETE FROM cart WHERE caId=#{caId};	
	</delete>	
	
	<!-- 총 포인트 및 사용할 포인트 감액 -->
	<update id="toOrder_minus_cPoint" parameterType="orderVO">
		UPDATE client SET  cPoint = cPoint - #{usedPoint} WHERE cId=#{clientId};
	</update>
	
	<!-- 총 포인트 및 사용할 포인트 감액 -->
	<update id="toOrder_usedPoint" parameterType="orderVO">
		UPDATE orders SET usedPoint = #{usedPoint} WHERE odid=#{odid};
	</update>
	
	<!-- 적립될 포인트 정보-->
	<update id="toOrder_plusPoint" parameterType="orderVO">
		UPDATE client cl
		SET cPoint = cPoint + #{plusPoint}
		WHERE cId=#{clientId};
	</update>

	<!-- 사용자는 주문에서 수정,삭제 불가능  -  원할 시, 환불,교환 등으로 이동  -->
	
	<!-- 결제 정보 저장 -->
     <insert id="insertPaymentInfo" parameterType="com.w2.client.order.PaymentVO">
       INSERT INTO payment_info (payId, odId, payMtd, payStatus, cId)
       VALUES ( #{ payId }, #{ odId }, #{ payMtd }, #{ payStatus }, #{ clientId });
    </insert> 
	
	
<!-- 사용자 주문 내역 조회 --> <!-- 상품이 여러 종류일 때, __ 외 _ 의 형식으로 / 1종류일 때, (상품명)으로 출력  -->
 	<select id="OrderList" resultMap="orderVO" parameterType="orderVO">
		SELECT *,count(*),
		CASE
		WHEN count(*) = 1 THEN pro.proName
		ELSE concat(pro.proName,' 외 ',count(*)-1,'개')
		END AS 'addColumn'
		FROM orders od
		JOIN product pro ON od.opIdList LIKE CONCAT('%', pro.proId, '%')
        JOIN payment_info pay ON pay.odid = od.odid
		WHERE od.cId=#{clientId}
		GROUP BY od.odid;
	</select>
</mapper>